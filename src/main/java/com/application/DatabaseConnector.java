package com.application;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DatabaseConnector {
    private Connection connection;

    public DatabaseConnector() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance(); //Creating a new instance of the driver. Needed for DB connection

            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "password123"); //connecting to the library schema
            if (connection.isValid(10)) {
                System.out.println("Connected to database successfully");
            }
        } catch (Exception ex) {
            System.err.println("An error occurred while connecting to the database: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    public void insertBook(BookInput bookInput) throws SQLException {
        String insertPublicationSQL = "INSERT INTO Publication (title) VALUES (?)"; // Creating a publication with x Title.
        String insertBookSQL = "INSERT INTO Book (library_id, isbn) VALUES (?, ?)"; // LastInsertID is needed to link book to publication superclass
        String insertAuthorSQL = "INSERT INTO Authors (library_id, author_name) VALUES (?, ?)";
        String insertPublisherSQL = "INSERT INTO Publisher (library_id, publisher_name) VALUES (?, ?)";
        String insertGenreSQL = "INSERT INTO Genre (library_id, dewey_decimal, genre) VALUES (?, ?, ?)";

        PreparedStatement publicationStatement = connection.prepareStatement(insertPublicationSQL, Statement.RETURN_GENERATED_KEYS);
        PreparedStatement bookStatement = connection.prepareStatement(insertBookSQL);
        PreparedStatement authorStatement = connection.prepareStatement(insertAuthorSQL);
        PreparedStatement publisherStatement = connection.prepareStatement(insertPublisherSQL);
        PreparedStatement genreStatement = connection.prepareStatement(insertGenreSQL);

        int libraryId = -1; //initializing this value to use later

        if (bookInput != null) {
            //Collceting all values from the bookInput
            String title = bookInput.getTitle();
            String isbn = bookInput.getIsbn();
            ArrayList<String> authors = bookInput.getAuthors();
            String publisher = bookInput.getPublisher();
            String deweyNum = bookInput.getDeweyNum();
            String genre = bookInput.getGenre();

            if (title != null && !title.isEmpty()) {
                // If the title isn't empty, replace the ? in the string above with it
                publicationStatement.setString(1, title);
                publicationStatement.executeUpdate();

                ResultSet keys = publicationStatement.getGeneratedKeys(); // Get the key generated by this entry to use for subsequent entries.

                if (keys.next()) {
                    libraryId = keys.getInt(1);
                }
            }

            if (isbn != null && !isbn.isEmpty() && libraryId != -1) {
                // If the ISBN isn't empty and libraryId is valid, replace the ? in the string above with it
                bookStatement.setString(1, Integer.toString(libraryId));
                bookStatement.setString(2, isbn);
                bookStatement.executeUpdate();
            }

            if (authors != null && !authors.isEmpty() && libraryId != -1) {
                for (String author : authors) {
                    // For each author, insert into the Authors table
                    authorStatement.setString(1, Integer.toString(libraryId));
                    authorStatement.setString(2, author);
                    authorStatement.executeUpdate();
                }
            }

            if (publisher != null && !publisher.isEmpty() && libraryId != -1) {
                // If the Publisher isn't empty and libraryId is valid, replace the ? in the string above with it
                publisherStatement.setString(1, Integer.toString(libraryId));
                publisherStatement.setString(2, publisher);
                publisherStatement.executeUpdate();
            }

            if (genre != null && !genre.isEmpty() && libraryId != -1) {
                genreStatement.setString(1, Integer.toString(libraryId));
                genreStatement.setString(2, deweyNum); // Can be null
                genreStatement.setString(3, genre);
                genreStatement.executeUpdate();
            }
        }

        //Closing statements to prevent concurrent modification
        genreStatement.close();
        publicationStatement.close();
        bookStatement.close();
        authorStatement.close();
        publisherStatement.close();
    }

    public List<BookInput> searchBook(BookInput searchCriteria) throws SQLException {
        //Base SQL Query, Selects all publication subclasses that have the same library_id as the parent
        String selectBookSQL = "SELECT Publication.*, " +
                "GROUP_CONCAT(Authors.author_name SEPARATOR ', ') AS author_names, " +
                "Book.isbn," +
                "Publication.title, " +
                "Publisher.publisher_name, " +
                "Genre.dewey_decimal, " +
                "Genre.genre " +
                "FROM Publication " +
                "LEFT JOIN Book ON Publication.library_id = Book.library_id " +
                "LEFT JOIN Authors ON Publication.library_id = Authors.library_id " +
                "LEFT JOIN Publisher ON Publication.library_id = Publisher.library_id " +
                "LEFT JOIN Genre ON Publication.library_id = Genre.library_id ";

        // StringBuilder to construct the SQL query dynamically
        StringBuilder queryBuilder = new StringBuilder(selectBookSQL);
        List<String> conditions = new ArrayList<>();
        List<String> parameters = new ArrayList<>();

        // Construct SQL conditions based on provided search criteria
        if (searchCriteria != null) {
            if (searchCriteria.getTitle() != null) { //If user input a title, add it to the query
                conditions.add("Publication.title LIKE ?");
                parameters.add("%" + searchCriteria.getTitle() + "%");
            }
            if (searchCriteria.getIsbn() != null) { // If user input an ISBN, add it to the query
                conditions.add("Book.isbn = ?");
                parameters.add(searchCriteria.getIsbn());
            }
            if (!searchCriteria.getAuthors().isEmpty()) { // If user input an author, add it to the query
                List<String> authorConditions = new ArrayList<>();
                for (String author : searchCriteria.getAuthors()) {
                    //For every author in the list, add it to the query
                    authorConditions.add("Authors.author_name LIKE ?");
                    parameters.add("%" + author + "%");
                }
                //For every entry in the authorConditions list, separate with an OR block.
                conditions.add("(" + String.join(" OR ", authorConditions) + ")");
            }
            if (searchCriteria.getPublisher() != null) { // If user inputs a publisher, add it to the query
                conditions.add("Publisher.publisher_name = ?");
                parameters.add(searchCriteria.getPublisher());
            }
            if (searchCriteria.getGenre() != null) {// If user inputs a Genre, add it to the query
                conditions.add("Genre.genre = ?");
                parameters.add(searchCriteria.getGenre());
            }
            if (searchCriteria.getDeweyNum() != null) {// If user inputs a DeweyNum, add it to the query
                conditions.add("Genre.dewey_decimal = ?");
                parameters.add(searchCriteria.getDeweyNum());
            }
        }

        // Add WHERE clause if any conditions exist
        if (!conditions.isEmpty()) {
            //Because we're using lists, we can use a delimiter and concat. all entries with the word AND in between
            queryBuilder.append("WHERE ").append(String.join(" AND ", conditions));
        }

        // Add GROUP BY clause to group results by Publication.library_id
        queryBuilder.append(" GROUP BY Publication.library_id");

        System.out.println(queryBuilder);

        // Prepare the statement and execute the query
        PreparedStatement selectStatement = connection.prepareStatement(queryBuilder.toString());

        // Set parameters for the prepared statement
        for (int i = 0; i < parameters.size(); i++) {
            //Replacing question marks with their respective conditions
            selectStatement.setString(i + 1, parameters.get(i));
        }

        System.out.println(selectStatement.toString());

        //Executing the query
        ResultSet resultSet = selectStatement.executeQuery();
        List<BookInput> books = new ArrayList<>();
        ResultSetMetaData metaData = resultSet.getMetaData(); //Metadata holds number of columns in the results.
        int columnCount = metaData.getColumnCount();

        while (resultSet.next()) {
            BookInput bookInput = new BookInput();
            // Populate BookInput object with retrieved data

            for (int i = 1; i <= columnCount; i++) {
                String columnName = metaData.getColumnName(i);
                String columnValue = resultSet.getString(i);

                // Check if the column exists in the result set and retrieve its value
                switch (columnName) {
                    case "title":
                        bookInput.setTitle(columnValue != null ? columnValue : ""); //If not null, set to column value, else set to emptyString
                        break;
                    case "isbn":
                        bookInput.setIsbn(columnValue != null ? columnValue : "");
                        break;
                    case "author_names":
                        bookInput.setAuthorOutput(columnValue != null ? columnValue : "");
                        break;
                    case "publisher_name":
                        bookInput.setPublisher(columnValue != null ? columnValue : "");
                        break;
                    case "dewey_decimal":
                        bookInput.setDeweyNum(columnValue != null ? columnValue : "");
                        break;
                    case "genre":
                        bookInput.setGenre(columnValue != null ? columnValue : "");
                        break;
                }
            }
            books.add(bookInput);
        }
        return books;
    }
    public void deleteBook(BookInput deleteCriteria) throws SQLException {
        // SQL Query to collect library_id of the books to delete
        String selectSQL = "SELECT Publication.library_id FROM Publication " +
                "LEFT JOIN Book ON Publication.library_id = Book.library_id " +
                "LEFT JOIN Authors ON Publication.library_id = Authors.library_id " +
                "LEFT JOIN Genre ON Publication.library_id = Genre.library_id " +
                "LEFT JOIN Publisher ON Publication.library_id = Publisher.library_id " +
                "WHERE ";

        // ArrayList to store the conditions for the WHERE clause
        List<String> conditions = new ArrayList<>();
        List<String> parameters = new ArrayList<>();

        // Check if deleteCriteria contains ISBN, title, or author
        if (deleteCriteria != null) {
            if (deleteCriteria.getIsbn() != null) {
                conditions.add("Book.isbn = ?");
                parameters.add(deleteCriteria.getIsbn());
            }
            if (deleteCriteria.getTitle() != null) {
                conditions.add("Publication.title = ?");
                parameters.add(deleteCriteria.getTitle());
            }
            if (deleteCriteria.getAuthors() != null && !deleteCriteria.getAuthors().isEmpty()) {
                List<String> authorConditions = new ArrayList<>();
                for (String author : deleteCriteria.getAuthors()) {
                    authorConditions.add("Authors.author_name = ?");
                    parameters.add(author);
                }
                conditions.add("(" + String.join(" OR ", authorConditions) + ")");
            }
            if (deleteCriteria.getGenre() != null) {
                conditions.add("Genre.genre = ?");
                parameters.add(deleteCriteria.getGenre());
            }
            if (deleteCriteria.getDeweyNum() != null) {
                conditions.add("Genre.dewey_decimal = ?");
                parameters.add(deleteCriteria.getDeweyNum());
            }
            if (deleteCriteria.getPublisher() != null) {
                conditions.add("Publisher.publisher_name = ?");
                parameters.add(deleteCriteria.getPublisher());
            }
        }

        // Combine conditions into the WHERE clause
        if (!conditions.isEmpty()) {
            selectSQL += String.join(" AND ", conditions);
        }

        // Prepare the statement for the select query
        PreparedStatement selectStatement = connection.prepareStatement(selectSQL);

        // Set parameters for the prepared statement
        for (int i = 0; i < parameters.size(); i++) {
            selectStatement.setString(i + 1, parameters.get(i));
        }

        // Execute the select query
        ResultSet resultSet = selectStatement.executeQuery();

        // List to store the libraryIDs to delete
        List<String> libraryIdsToDelete = new ArrayList<>();

        // Store the found library_ids
        while (resultSet.next()) {
            libraryIdsToDelete.add(resultSet.getString("library_id"));
        }

        // Close the prepared statement and result set
        resultSet.close();
        selectStatement.close();

        // Delete books using the retrieved library_ids
        deleteBooksByLibraryIds(libraryIdsToDelete);
    }

    private void deleteBooksByLibraryIds(List<String> libraryIds) throws SQLException {
        // Base SQL DELETE queries, Have to delete Book and Authors before deleting publication
        String deleteBookSQL = "DELETE FROM Book WHERE library_id = ?";
        String deleteAuthorsSQL = "DELETE FROM Authors WHERE library_id = ?";
        String deletePublisherSQL = "DELETE FROM Publisher WHERE library_id = ?";
        String deleteGenreSQL = "DELETE FROM Genre WHERE library_id = ?";
        String deletePublicationSQL = "DELETE FROM Publication WHERE library_id = ?";

        // Prepare statements for deletion
        PreparedStatement deleteBookStatement = connection.prepareStatement(deleteBookSQL);
        PreparedStatement deleteAuthorsStatement = connection.prepareStatement(deleteAuthorsSQL);
        PreparedStatement deletePublisherStatement = connection.prepareStatement(deletePublisherSQL);
        PreparedStatement deleteGenreStatement = connection.prepareStatement(deleteGenreSQL);
        PreparedStatement deletePublicationStatement = connection.prepareStatement(deletePublicationSQL);

        // Delete books for each library_id
        for (String libraryId : libraryIds) {
            // Set library_id parameter for deletion
            deleteBookStatement.setString(1, libraryId);
            deleteAuthorsStatement.setString(1, libraryId);
            deletePublisherStatement.setString(1, libraryId);
            deleteGenreStatement.setString(1, libraryId);
            deletePublicationStatement.setString(1, libraryId);

            // Execute the deletion queries
            deleteBookStatement.executeUpdate();
            deletePublisherStatement.executeUpdate();
            deleteGenreStatement.executeUpdate();
            deleteAuthorsStatement.executeUpdate();
            deletePublicationStatement.executeUpdate();

            System.out.println("Deleted records associated with library_id " + libraryId + ".");
        }

        // Close the prepared statements
        deleteGenreStatement.close();
        deletePublisherStatement.close();
        deleteBookStatement.close();
        deleteAuthorsStatement.close();
        deletePublicationStatement.close();
    }

    public void editBookByISBN(BookInput updatedBook) throws SQLException {
        //Base SQL query to find a book based on isbn
        String selectBookSQL = "SELECT Publication.library_id, " +
                "Publication.title, " +
                "Publisher.publisher_name, " +
                "GROUP_CONCAT(Authors.author_name SEPARATOR ', ') AS author_names, " +
                "Genre.dewey_decimal, " +
                "Genre.genre " +
                "FROM Publication " +
                "LEFT JOIN Book ON Publication.library_id = Book.library_id " +
                "LEFT JOIN Authors ON Publication.library_id = Authors.library_id " +
                "LEFT JOIN Publisher ON Publication.library_id = Publisher.library_id " +
                "LEFT JOIN Genre ON Publication.library_id = Genre.library_id " +
                "WHERE Book.isbn = ? " +
                "GROUP BY Publication.library_id";

        PreparedStatement selectStatement = connection.prepareStatement(selectBookSQL);
        selectStatement.setString(1, updatedBook.getIsbn());
        ResultSet resultSet = selectStatement.executeQuery();

        if (resultSet.next()) {
            int libraryId = resultSet.getInt("library_id");
            String currentTitle = resultSet.getString("title");
            String currentPublisher = resultSet.getString("publisher_name");
            String currentDeweyNum = resultSet.getString("dewey_decimal");
            String currentGenre = resultSet.getString("genre");

            // Update the fields if they have changed
            //If null or hasn't changed, will keep the previous value
            if (updatedBook.getTitle() != null && !updatedBook.getTitle().equals(currentTitle)) {
                currentTitle = updatedBook.getTitle();
            }
            if (updatedBook.getPublisher() != null && !updatedBook.getPublisher().equals(currentPublisher)) {
                currentPublisher = updatedBook.getPublisher();
            }
            if (updatedBook.getDeweyNum() != null && !updatedBook.getDeweyNum().equals(currentDeweyNum)) {
                currentDeweyNum = updatedBook.getDeweyNum();
            }
            if (updatedBook.getGenre() != null && !updatedBook.getGenre().equals(currentGenre)) {
                currentGenre = updatedBook.getGenre();
            }

            // Update SQL queries
            String updatePublicationSQL = "UPDATE Publication SET title = ? WHERE library_id = ?";
            String updatePublisherSQL = "UPDATE Publisher SET publisher_name = ? WHERE library_id = ?";
            String updateGenreSQL = "UPDATE Genre SET dewey_decimal = ?, genre = ? WHERE library_id = ?";

            PreparedStatement updatePublicationStatement = connection.prepareStatement(updatePublicationSQL);
            PreparedStatement updatePublisherStatement = connection.prepareStatement(updatePublisherSQL);
            PreparedStatement updateGenreStatement = connection.prepareStatement(updateGenreSQL);

            //replacing parameters with values
            updatePublicationStatement.setString(1, currentTitle);
            updatePublicationStatement.setInt(2, libraryId);
            updatePublisherStatement.setString(1, currentPublisher);
            updatePublisherStatement.setInt(2, libraryId);
            updateGenreStatement.setString(1, currentDeweyNum);
            updateGenreStatement.setString(2, currentGenre);
            updateGenreStatement.setInt(3, libraryId);

            System.out.println(updateGenreStatement);
            System.out.println(updatePublisherStatement);
            //executing statements
            updatePublisherStatement.executeUpdate();
            updateGenreStatement.executeUpdate();
            updatePublicationStatement.executeUpdate();

            updatePublicationStatement.close();
            updatePublisherStatement.close();
            updateGenreStatement.close();
        }
        resultSet.close();
        selectStatement.close();
        }
}
